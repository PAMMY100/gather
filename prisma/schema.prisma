generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id
  username String? @unique
  cover String?
  avater String?
  name String?
  surname String?
  description String?
  city String?
  school String?
  work String?
  website String?
  createdAt DateTime @default(now())
  posts Post[]
  likes Like[]
  comments Comment[]
  followers Follower[] @relation("UserFollowers")
  followings Follower[] @relation("UserFollowings")
  followRequestSent FollowRequest[] @relation("FollowRequestSent")
  followRequestReceived FollowRequest[] @relation("FollowRequestReceived")
  blocks Block[] @relation("BlockSent")
  blockBy Block[] @relation("BlockReceived")
  stories Story[]
}

model Post {
  id Int @id @default(autoincrement())
  desc String
  img String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user User @relation(fields: [userId], references: [id])
  likes Like[]
  comments Comment[]
}

model Comment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  desc String
  postId Int
  userId String
  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])
  likes Like[]
}

model Like {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId String
  postId Int?
  commentId Int?
  user User @relation(fields: [userId], references: [id])
  post Post? @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])
}

model Follower {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  followerId String?
  followingId String?
  follower User? @relation("UserFollowers", fields: [followerId], references: [id])
  following User? @relation("UserFollowings", fields: [followingId], references: [id])
}

model FollowRequest {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  senderId String?
  receiverId String?
  sender User? @relation("FollowRequestSent", fields: [senderId], references: [id])
  receiver User? @relation("FollowRequestReceived", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

model Block {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  blockerId String?
  blockedId String?
  blocker User? @relation("BlockSent", fields: [blockerId], references: [id])
  blocked User? @relation("BlockReceived", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
}

model Story {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiredAt DateTime
  img String
  userId String @unique
  user User @relation(fields: [userId], references: [id])
}
